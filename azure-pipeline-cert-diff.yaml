trigger: none

resources:
  repositories:
  - repository: azure
    type: github
    name: pagopa/azure-pipeline-templates
    endpoint: 'azure-devops-github-ro'
    ref: refs/heads/master
  
pool:
  vmImage: ubuntu-24.04

jobs:
- job: GetCert
  steps:

  - script: |
      PYTHON_VERSION=$(cat .python-version)
      echo "##vso[task.setvariable variable=PYTHON_VERSION]$PYTHON_VERSION"
    displayName: 'Read Python version'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(PYTHON_VERSION)'

  - script: |
      echo "Installing required packages..."
      python -m pip install --require-hashes -r requirements-cert-diff.txt

  - task: PythonScript@0
    env:
      CERT_DIFF_VERSION: $(CERT_DIFF_VERSION)
    inputs:
      scriptSource: 'inline'
      script: |
        import requests
        import shutil
        import os
        import hashlib
        
        version = os.environ.get("CERT_DIFF_VERSION")
        
        base_url = f"https://github.com/pagopa/certdiff/releases/download/v{version}/"
        wheel_filename = f"certdiff-{version}-py3-none-any.whl"
        sha_filename = f"certdiff-{version}-py3-none-any.whl" + ".sha256"
        
        def download_file(url, dest):
          with requests.get(url, stream=True) as r:
            r.raise_for_status()
            with open(dest, 'wb') as f:
                shutil.copyfileobj(r.raw, f)
        
        def compute_sha256(file_path):
          sha256 = hashlib.sha256()
          with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b""):
                sha256.update(chunk)
          return sha256.hexdigest()
        
        download_file(base_url + wheel_filename, wheel_filename)
        download_file(base_url + sha_filename, sha_filename)
        
        with open(sha_filename, 'r') as f:
          first_line = f.readline().strip()
          expected_hash = first_line.split()[0]
        
        actual_hash = compute_sha256(wheel_filename)
        
        if expected_hash == actual_hash:
          print("✅ SHA256 verified: match")
        else:
          raise Exception(f"❌ SHA256 mismatch:\nExpected: {expected_hash}\nActual:   {actual_hash}")

  - script: |
      pip install $(ls -1 certdiff-$(CERT_DIFF_VERSION)-py3-none-any.whl)
      certdiff --help

  - task: AzureCLI@2
    name: GetCertificatesFromKeyVault
    inputs:
      azureSubscription: "$(KEY_VAULT_SERVICE_CONNECTION)"
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        
        # Extract Force variable
        FORCE_RENEW_CERT=$(az keyvault certificate show --vault-name '$(KEY_VAULT_NAME)' --name '$(KEY_VAULT_CERT_NAME)' | jq -jr '.tags.Force')
        echo -e "##vso[task.setvariable variable=FORCE_RENEW_CERT]$(echo "$FORCE_RENEW_CERT")"
        
        az keyvault secret download --file stable.pfx --encoding base64 --vault-name '$(KEY_VAULT_NAME)' --name '$(KEY_VAULT_CERT_NAME_STABLE)'  >/dev/null
        az keyvault secret download --file current.pfx --encoding base64 --vault-name '$(KEY_VAULT_NAME)' --name '$(KEY_VAULT_CERT_NAME)' >/dev/null
        
        for name in stable current; do
          if [[ ! -f "$name.pfx" ]]; then
              echo "❗File $name.pfx not found. Skipping..."
              exit 1
          fi
        
          # Extract certificates from .pfx (without private keys)
          echo "🔐 Extracting certificates from $name.pfx"
          openssl pkcs12 -in "$name.pfx" -nodes -nokeys -passin pass: | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > "$name.pem"
          
          # Split multiple certificates into separate file
          echo "📂 Splitting certificates into individual files"                
          CERT_COUNT=$(awk '/-----BEGIN CERTIFICATE-----/{x="'"$name"'_cert" ++i ".pem"} x{print > x} END{print i}' "$name.pem")
          
          echo "🔁 Converting DER → PEM"
          openssl x509 -in ${name}_cert${CERT_COUNT}.pem -noout -text | grep 'CA Issuers' | cut -d ':' -f2,3 | xargs curl -s -o ${name}_root.der
    
          openssl x509 -inform DER -in ${name}_root.der -out ${name}_root.pem
          
          echo "🔗 Generating certificate chain PEM: ${name}_chain.pem"
          cat $(seq 1 $CERT_COUNT | xargs -I{} echo "${name}_cert{}.pem") ${name}_root.pem > ${name}_chain.pem
        done

  - task: AzureCLI@2
    condition: succeeded()
    name: CompareCert
    inputs:
      azureSubscription: "$(KEY_VAULT_SERVICE_CONNECTION)"
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        certdiff --old stable_chain.pem --new current_chain.pem --report-json report.json --verbose
        cat report.json
        certdiff --old stable_chain.pem --new current_chain.pem
        cert_diff_status=$?
        
        if [[ "$(FORCE_RENEW_CERT)" == "True" ]]; then
          echo "FORCE_RENEW_CERT is True, setting RENEW_DAYS to Now"
          echo -e "##vso[task.setvariable variable=RENEW_DAYS]Now"
          exit 0
        fi

        if ! openssl x509 -inform pem -checkend $(($CERT_NAME_EXPIRE_SECONDS-518400)) -noout -in stable_chain.pem >/dev/null 2>&1; then 
          echo "The certificate expires in less than $(($CERT_NAME_EXPIRE_SECONDS / 86400)) day. Proceeding with the switch task"
          echo -e "##vso[task.setvariable variable=ACTION]Renew"
          exit 0
        fi
        
        if ! openssl x509 -inform pem -checkend $(CERT_NAME_EXPIRE_SECONDS) -noout -in stable_chain.pem >/dev/null 2>&1; then 
          echo "The certificate expires in less than $(($CERT_NAME_EXPIRE_SECONDS / 86400)) day. Proceeding with the mail task"
          echo -e "##vso[task.setvariable variable=ACTION]Mail"
          echo -e "##vso[task.setvariable variable=RENEW_DAYS]in 7 days"
          exit 0
        else
          echo "The certificate is valid. No action required"
          exit 0
        fi

  - task: PythonScript@0
    name: PrepareMail
    condition: or(
        eq(variables['ACTION'], 'Mail'),
        eq(variables['FORCE_RENEW_CERT'], 'True')
      )
    inputs:
      scriptSource: 'inline'
      script: |
        import json

        def format_change(field, old, new):
            return (
                f"<li><b>{field}:</b> "
                f"From <span style='color:blue;'>{old}</span> "
                f"to <span style='color:red;'>{new}</span>"
                f"</li>"
            )

        def generate_html(data):
            sections = []
            for cert_type in ['root', 'intermediate', 'leaf']:
                changes = [d for d in data.get("differences", []) if d["type"] == cert_type]
                section = f"<p><b>{cert_type.capitalize()} Changes:</b></p><ul>"
        
                relevant = [c for c in changes if c["field"] == "not_valid_after"]
                if relevant:
                    for c in relevant:
                        section += format_change("Not valid after", c["old"], c["new"])
                else:
                    section += "<li><b>Not valid after:</b> <span style='color:gray;'>No changes</span></li>"

                section += "</ul>"
                sections.append(section)

            return "".join(sections)

        with open("report.json", "r") as f:
            input_data = json.load(f)

        html_output = generate_html(input_data)
        print(f"##vso[task.setvariable variable=EMAILBODY;]{html_output}")

  - template: templates/send-mail/template.yaml@azure
    parameters:
      CONDITION_FLAG: or(
          eq(variables['ACTION'], 'Mail'),
          eq(variables['FORCE_RENEW_CERT'], 'True')
        )
      MAIL_SUBJECT: "CertificateIssue - $(KEY_VAULT_CERT_NAME)"
      MAIL_BODY: |
        <html>
          <body>
            <p>This is an email to inform you that on <b>$(KEY_VAULT_CERT_NAME)</b> there some differences with new certificate.</p>
            <p> The certificate will be renewed $(RENEW_DAYS).</p>
            <p>$(EMAILBODY)</p>
          </body>
        </html>
      SENDER_EMAIL: $(SENDER_EMAIL)
      RECEIVER_EMAIL: $(RECEIVER_EMAIL)
      APP_PASS: $(APP_PASS)
      ATTACHMENTS_COMMA_SEP: "current_chain.pem"

  - task: AzureCLI@2
    condition: or(
        eq(variables['ACTION'], 'Renew'),
        eq(variables['FORCE_RENEW_CERT'], 'True')
      )
    name: ChangeCertificate
    inputs:
      azureSubscription: "$(KEY_VAULT_SERVICE_CONNECTION)"
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az keyvault certificate import --vault-name '$(KEY_VAULT_NAME)' --name '$(KEY_VAULT_CERT_NAME_STABLE)' -f current.pfx >/dev/null
        az keyvault certificate set-attributes --vault-name '$(KEY_VAULT_NAME)' --name '$(KEY_VAULT_CERT_NAME)' --tags "Force"="False" >/dev/null

  - task: Bash@3
    name: CleanupEverything
    condition: always()
    inputs:
      targetType: "inline"
      script: |
        rm -f *.pem
        rm -f *.pfx
        rm -f *.der

- template: templates/availability-publisher/template-job.yaml@azure
  parameters:
    APP_INSIGHT_CONNECTION_STRING: $(APP_INSIGHT_CONNECTION_STRING)
    PIPELINE_NAME: $(System.DefinitionName)
    DEPENDS_ON: GetCert
