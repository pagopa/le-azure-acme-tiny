pool:
  vmImage: "ubuntu-20.04"

parameters:
  - name: "force_renew_cert"
    displayName: "Force the existing certificate to be renewed anyway"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "alt_chain_cert"
    displayName: "Specify a CN for the issuer"
    type: string
    default: "CN=DST Root CA X3"

stages:
  - stage: SignCertificate
    jobs:
      - job: RenewalDecision
        steps:
          - task: AzureCLI@2
            name: GetCertificateFromKeyVaultAndDecide
            inputs:
              azureSubscription: "$(KEY_VAULT_SERVICE_CONNECTION)"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                if [ ${{ parameters.force_renew_cert }} == "True" ]
                then
                  echo "##vso[task.setvariable variable=require_new_certificate;isOutput=true]True"
                  echo "Parameter force_renew_cert is set to true"
                  exit 0
                fi
                if ! az keyvault certificate download --vault-name '$(KEY_VAULT_NAME)' -n '$(KEY_VAULT_CERT_NAME)' -f certificate.pem >/dev/null
                then
                  echo "##vso[task.setvariable variable=require_new_certificate;isOutput=true]True"
                  echo "The certificate was not found in the selected keyvault"
                  exit 0
                else
                  if ! openssl x509 -inform pem -checkend '$(CERT_NAME_EXPIRE_SECONDS)' -noout -in certificate.pem
                  then
                    # certificate is expiring or is already expired
                    echo "##vso[task.setvariable variable=require_new_certificate;isOutput=true]True"
                  fi
                fi

          - script: rm -f certificate.pem
            name: CleanupRenewalDecision
            condition: eq(${{parameters.force_renew_cert}}, False)

      - job: GetCertificateFromLE
        dependsOn: RenewalDecision
        condition: succeededOrFailed()
        variables:
          require_new_certificate: $[ dependencies.RenewalDecision.outputs['GetCertificateFromKeyVaultAndDecide.require_new_certificate'] ]

        steps:
          - script: |
              pip3 install --require-hashes --requirement requirements-output.txt

            name: InstallPythonDependencies
            condition: eq(variables.require_new_certificate, True)

          - task: PythonScript@0
            name: GenerateCertificateSigningRequest
            condition: and(succeeded(), eq(variables.require_new_certificate, True))
            inputs:
              scriptSource: filePath
              scriptPath: generate_csr.py
              arguments: --common-name $(csr_common_name) --out csr.der --rsa-key-size 2048

          - task: Bash@3
            name: KeysToFile
            condition: and(succeeded(), eq(variables.require_new_certificate, true))
            inputs:
              targetType: "inline"
              script: |
                printf "%s\n" '$(LE_PRIVATE_KEY_JSON)' > private_key.json
                printf "%s\n" '$(LE_REGR_JSON)' > regr.json

          - task: AzureCLI@2
            name: ACMEv2
            condition: and(succeeded(), eq(variables.require_new_certificate, True))
            env:
              AZURE_SUBSCRIPTION_ID: $(LE_AZURE_SUBSCRIPTION_ID)
              AZURE_IDENTITY_TYPE: $(LE_AZURE_IDENTITY_TYPE)
            inputs:
              azureSubscription: "$(LE_SERVICE_CONNECTION)"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: "python3 acme_tiny.py --private-key private_key.json --regr regr.json --csr csr.der --out certificate_chain.pem"

          - task: AzureCLI@2
            name: SelectCertificate
            condition: and(succeeded(), eq(variables.require_new_certificate, True))
            inputs:
              azureSubscription: $(KEY_VAULT_SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                # by default the certificate_chain.pem.0 must be the selected certificate in case of no CN matches
                mv certificate_chain.pem.0 certificate_chain.pem
                for file in certificate_chain.pem.*; do
                  # assuming ordered PEMs in file
                  root_issuer=$(while openssl x509 -inform pem -noout -issuer 2>/dev/null; do :; done < "$file" | tail -n 1)
                  # check if the grep result is positive or not
                  if echo "$root_issuer" | grep "${{ parameters.alt_chain_cert }}" 1>/dev/null
                  then
                    echo "Found ${{ parameters.alt_chain_cert }} in $file!"
                    # print some debug info
                    while openssl x509 -inform pem -noout -issuer 2>/dev/null; do :; done < "$file"
                    # select this file
                    mv "$file" certificate_chain.pem
                    break
                  else
                    echo "Skipping $file"
                  fi
                done

          - task: AzureCLI@2
            name: SaveCertificateInKeyVault
            condition: and(succeeded(), eq(variables.require_new_certificate, True))
            inputs:
              azureSubscription: $(KEY_VAULT_SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                openssl pkcs12 -inkey csr.key -in certificate_chain.pem -export -passout pass: -nodes -out certificate_chain.pfx
                az keyvault certificate import --vault-name '$(KEY_VAULT_NAME)' -n '$(KEY_VAULT_CERT_NAME)' --disabled false -f certificate_chain.pfx --password "" >/dev/null

          - task: Bash@3
            name: CleanupEverything
            condition: always()
            inputs:
              targetType: "inline"
              script: |
                rm -f private_key.json
                rm -f regr.json
                rm -f csr.der
                rm -f csr.key
                rm -f certificate_chain.pem.*
                rm -f certificate_chain.pem
                rm -f certificate_chain.pfx
